{"version":3,"sources":["logo.svg","components/userInfo/userInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Data","billingAddress","firstName","lastName","address1","address2","city","state","zipcode","country","shippingAddress","orderDate","expectedDelivery","products","id","name","qty","price","notes","UserInfo","props","deleteProduct","index","length","splice","setState","addProduct","push","this","className","type","placeholder","value","onChange","e","target","map","product","key","onClick","style","textAlign","console","log","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a9cd92b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './userInfo.css';\n\nconst Data = { \n  billingAddress: {\n    firstName: \"\",\n    lastName: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    state: \"\",\n    zipcode: \"\",\n    country: \"\"\n  },\n  shippingAddress: {\n    firstName: \"\",\n    lastName: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    state: \"\",\n    zipcode: \"\",\n    country: \"\"\n  },\n  orderDate: \"2019-09-23\",\n  expectedDelivery: \"2019-09-23\",\n  products: [\n    {\n      id: 10000,\n      name: \"Stockholm dinning\",\n      qty: 2,\n      price: 1000,\n      notes: \"\"\n    },\n    {\n      id: 76382,\n      name: \"Levi's Jeans\",\n      qty: 5,\n      price: 1000,\n      notes: \"\"\n    },\n    {\n      id: 854352,\n      name: \"AllenSolly Shirt Black\",\n      qty: 2,\n      price: 1000,\n      notes: \"\"\n    },\n  ]\n }\n\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      billingAddress: {\n        firstName: \"\",\n        lastName: \"\",\n        address1: \"\",\n        address2: \"\",\n        city: \"\",\n        state: \"\",\n        zipcode: \"\",\n        country: \"\"\n      },\n      shippingAddress: {\n        firstName: \"\",\n        lastName: \"\",\n        address1: \"\",\n        address2: \"\",\n        city: \"\",\n        state: \"\",\n        zipcode: \"\",\n        country: \"\"\n      },\n      orderDate: \"\",\n      expectedDelivery: \"\",\n      products: []\n     }\n  }\n\n  componentDidMount() {\n    this.setState({\n      billingAddress: Data.billingAddress,\n      shippingAddress: Data.shippingAddress,\n      orderDate: Data.orderDate,\n      expectedDelivery: Data.expectedDelivery,\n      products: Data.products\n    });\n  }\n\n  deleteProduct = (index) => {\n    let products = this.state.products;\n    if (products.length) {\n      products.splice(index, 1);\n      this.setState({products});\n    }\n  }\n\n  addProduct = () => {\n    let obj = {\n      id: 0,\n      name: \"\",\n      qty: 0,\n      price: 0,\n      notes: \"\"\n    };\n    let products = this.state.products;\n    products.push(obj);\n    this.setState({products});\n  }\n  \n  render() { \n    return ( \n      <div className=\"user-info\">        \n        <div className=\"address-card\">\n          <div className=\"billing w-100\">\n            <label className=\"title\">Billing address</label>\n            <div className=\"address-form\">\n              <div className=\"form-input\">\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"First Name\" \n                  value={this.state.firstName}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.firstName = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                  </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Last Name\" \n                  value={this.state.lastName}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.lastName = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Address 1\" \n                  value={this.state.address1}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.address1 = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Address 2\" \n                  value={this.state.address2}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.address2 = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"City\" \n                  value={this.state.city}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.city = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"State\" \n                  value={this.state.state}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.state = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Zipcode\" \n                  value={this.state.zipcode}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.zipcode = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Country\" \n                  value={this.state.country}\n                  onChange={(e) => {\n                    let billingAddress = this.state.billingAddress;\n                    billingAddress.country = e.target.value;\n                    this.setState({billingAddress});\n                  }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div>\n              <label className=\"title\">Order date</label>\n              <div className=\"form-input\">\n                <input type=\"date\" value={this.state.orderDate} \n                onChange={(e) => this.setState({orderDate: e.target.value})} \n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"shipping w-100\">\n            <label className=\"title\">Shipping address</label>\n            <div className=\"address-form\">\n              <div className=\"form-input\">\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"First Name\" \n                  value={this.state.firstName}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.firstName = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                  </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Last Name\" \n                  value={this.state.lastName}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.lastName = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Address 1\" \n                  value={this.state.address1}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.address1 = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Address 2\" \n                  value={this.state.address2}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.address2 = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"City\" \n                  value={this.state.city}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.city = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"State\" \n                  value={this.state.state}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.state = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Zipcode\" \n                  value={this.state.zipcode}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.zipcode = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n                <div className=\"form-input\">\n                  <input type=\"text\" placeholder=\"Country\" \n                  value={this.state.country}\n                  onChange={(e) => {\n                    let shippingAddress = this.state.shippingAddress;\n                    shippingAddress.country = e.target.value;\n                    this.setState({shippingAddress});\n                  }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div>\n              <label className=\"title\">Expected Delivery</label>\n              <div className=\"form-input\">\n                <input type=\"date\" value={this.state.expectedDelivery} \n                onChange={(e) => this.setState({expectedDelivery: e.target.value})} \n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"products-card\">\n          <div className=\"products o-x-auto m-w-100\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Product ID</th>\n                  <th>Product Name</th>\n                  <th>Qty</th>\n                  <th>Unit Price</th>\n                  <th>Total Price</th>\n                  <th>Notes</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n              {\n                this.state.products.map((product, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input type=\"number\"\n                      value={product.id}\n                      onChange={(e) => {\n                        let products = this.state.products;\n                        products[index].id = e.target.value;\n                        this.setState({products});\n                      }}\n                      />\n                    </td>\n                    <td>\n                      <input type=\"text\"\n                      value={product.name}\n                      onChange={(e) => {\n                        let products = this.state.products;\n                        products[index].name = e.target.value;\n                        this.setState({products});\n                      }}\n                      />\n                    </td>\n                    <td>\n                      <input type=\"number\"\n                      value={product.qty}\n                      onChange={(e) => {\n                        let products = this.state.products;\n                        products[index].qty = e.target.value;\n                        this.setState({products});\n                      }}\n                      />\n                    </td>\n                    <td>\n                      <input type=\"number\"\n                      value={product.price}\n                      onChange={(e) => {\n                        let products = this.state.products;\n                        products[index].price = e.target.value;\n                        this.setState({products});\n                      }}\n                      />\n                    </td>\n                    <td>{product.qty * product.price}</td>\n                    <td>\n                      <input type=\"text\"\n                      value={product.notes}\n                      onChange={(e) => {\n                        let products = this.state.products;\n                        products[index].notes = e.target.value;\n                        this.setState({products});\n                      }}\n                      />\n                    </td>\n                    <td><button className=\"btn-delete btn-danger\" \n                    onClick={(e) => this.deleteProduct(index)}>delete</button></td>\n                  </tr>\n                ))\n              }\n              </tbody>\n            </table>\n          </div>\n          <div style={{textAlign: \"left\"}}>\n            <button className=\"btn-add btn-primary\" onClick={this.addProduct}>Add Product</button>\n          </div>\n          <div>\n            <button className=\"btn-save btn-primary\" onClick={() => console.log(this.state.products)}>save</button>\n          </div>\n        </div>\n      </div>\n     );\n  }\n}\n \nexport default UserInfo;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserInfo from './components/userInfo/userInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <UserInfo />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}